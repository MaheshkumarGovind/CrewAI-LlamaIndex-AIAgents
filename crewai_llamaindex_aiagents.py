# -*- coding: utf-8 -*-
"""CrewAI-LlamaIndex-AIAgents.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vByeb0rXWrDFyAXxn_JVr1VI6E0TAGrz

# Financial Analyst Agent Using CrewAI and LlamaIndex

### Install required dependencies
"""

!pip install llama-index --quiet
!pip install llama-index-llms-groq --quiet
!pip install llama-index-core --quiet
!pip install llama-index-readers-file --quiet
!pip install llama-index-tools-wolfram-alpha --quiet
!pip install llama-index-embeddings-huggingface --quiet
!pip install 'crewai[tools]' --quiet

"""### Let's setup the LLM with Groq. Sign up at Groq, it is free. Go to Groq console and get the API keys."""

from llama_index.llms.groq import Groq

llm = Groq(model="llama3-70b-8192", api_key="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")

response = llm.complete("Explain the importance of LLMs")
print(response)

"""### Crew AI requires a chat based model for binding"""

from langchain_openai import ChatOpenAI

# Define your API key here
groq_api_key = "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"

chat_llm = ChatOpenAI(
    openai_api_base="https://api.groq.com/openai/v1",
    openai_api_key=groq_api_key,
    model="llama3-70b-8192",
    temperature=0,
    max_tokens=1000,
)

"""### Download data"""

!wget "https://www.infosys.com/investors/reports-filings/annual-report/annual/documents/infosys-ar-23.pdf" -O infy_nav.pdf

"""### Parse the content of the data"""

from llama_index.core import SimpleDirectoryReader, VectorStoreIndex
from llama_index.llms.openai import OpenAI
import os
from langchain_openai import ChatOpenAI

reader = SimpleDirectoryReader(input_files=["infy_nav.pdf"])
docs = reader.load_data()
docs[1]

"""### Setup the embedding model"""

from llama_index.embeddings.huggingface import HuggingFaceEmbedding

embed_model = HuggingFaceEmbedding(model_name="BAAI/bge-small-en-v1.5")

"""### Build Index"""

index = VectorStoreIndex.from_documents(docs,
                                        embed_model=embed_model,
                                        )

"""### Build the Query Engine"""

query_engine = index.as_query_engine(similarity_top_k=5, llm=llm)

"""### Instantiate the query engine as a Tool"""

from crewai_tools import LlamaIndexTool
query_tool = LlamaIndexTool.from_query_engine(
    query_engine,
    name="infy Query Tool",
    description="Use this tool to lookup the 2022-23 Infosys Annual Report",
)

query_tool.args_schema.schema()

"""### Instantiate Researcher and Writer Agents"""

import os
from crewai import Agent, Task, Crew, Process

researcher = Agent(
    role="Lead Financial Analyst",
    goal="Uncover insights about different tech companies",
    backstory="""You work at an asset management firm.
  Your goal is to understand tech stocks like Infosys.""",
    verbose=True,
    allow_delegation=False,
    tools=[query_tool],
    llm=chat_llm,
)
writer = Agent(
    role="Tech Content Strategist",
    goal="Craft compelling content on tech advancements",
    backstory="""You are a renowned Content Strategist, known for your insightful and engaging articles.
  You transform complex concepts into compelling narratives.""",
    llm=chat_llm,
    verbose=True,
    allow_delegation=False,
)

"""### Define respective tasks"""

task1 = Task(
    description="""Conduct a comprehensive analysis of Infosys's use of artificial intelligence in their integrated annual report 2022-23.""",
    expected_output="Full analysis report in bullet points",
    agent=researcher,
)

task2 = Task(
    description="""Using the insights provided, develop an engaging blog
  post that highlights the importance of artificial intelligence at Infosys.
  Your post should be informative yet accessible, catering to a casual audience.
  Make it sound cool, avoid complex words.""",
    expected_output="Full blog post of at least 4 paragraphs",
    agent=writer,
)

"""### Instantiate the Crew with a sequential process"""

crew = Crew(
    agents=[researcher, writer],
    tasks=[task1, task2],
    verbose=2,  # You can set it to 1 or 2 to different logging levels
)

"""### Initiate the agent workflow: Let the magic begin!"""

result = crew.kickoff()

print("######################")
print(result)

